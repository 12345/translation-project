h1. Play でできる 5 つのすごいこと

5 つの例を通して play framework の背後にある哲学を見てみましょう。


h2. <a>1. HTTP パラメータの Java メソッド引数への紐付け</a>

play では java のコードから簡単に HTTP パラメータを探すことができます。HTTP パラメータと同じ名前でメソッド引数を宣言するだけです。

例えば、このようなリクエスト場合：

bc. /articles/archive?date=08/01/08&page=2

Java のメソッド引数として宣言することで data パラメータと page パラメータを検索することができます： 

bc. public static void archive(Date date, Integer page) {
    List<Article> articles = Articles.fromArchive(date, page);
    render(articles);
}

Play は HTTP パラメータの値を Java オブジェクトに変換するために、メソッド引数に標準の型を使用します。

このスマートな紐付けは **どのようなクラス** についても動作します。

bc. public class Person {
    public String name;
    public Integer age;
}

person を追加するシンプルなアクションコントローラはこんな感じかもしれません:

bc. public static void add(Person p) {
    p.save();
}

HTML フォームのフィールドには person を構成する名前を定義します:

bc. <form action="/Directory/add" method="POST">
    Name: <input type="text" name="p.name" />
    Age: <input type="text" name="p.age" />
</form>


h2. <a>2. 対応する Java メソッドの実行よるアクションへの Redirect</a>

play には Java Servlet の **forward** コマンドに該当するものは存在しません。しかし、とてもシンプルに別のアクションへリダイレクトすることができます。ただ対応する Java メソッドを実行すれば play は適切な HTTP "Redirect" レスポンスを生成します。

bc. public static void show(Long id) {
    Article article = Article.findById(id);
    render(article);
}
 
public static void edit(Long id, String title) {
    Article article = Article.findById(id);
    article.title = title;
    article.save();
    show(id);
}

edit アクションの終わりの部分に注目してください。show アクションにリダイレクトします。

テンプレートにおいても、同じような構文でリンクを生成することができます： 

bc. <a href="@{Article.show(article.id)}">${article.title}</a>

これは以下ような HTML を生成します： 

bc. <a href="/articles/15">My new article</a>


h2. <a>3. Java オブジェクトをテンプレートに引き渡すときの DRY</a>

ほとんどの Java フレームワークでは、Java オブジェクトをテンプレートシステムに渡すためには以下のように書かなければなりません:

bc. Article article = Article.findById(id);
User user = User.getConnected();
Map<String, Object> model = new HashMap<String,Object>();
model.put("article", article);
model.put("user", user);
render(model);

play では単純にこのように書くことができます:

bc. Article article = Article.findById(id);
User user = User.getConnected();
render(article, user);

テンプレートでは Java のローカル名を使ってオブジェクトを参照してください。これで役に立たないコードを省くことができます...

h2. <a>4. 強化された JPA</a>

JPA は間違いなく Java におけるベストな ORM API です。もし JPA を知っているなら、play で JPA がいとも簡単に利用できることに驚くでしょう。なんの設定も無しに play は自動的に JPA のエンティティマネージャを起動し、コードがリロードされたときはまるで魔法のように同期を行います。

さらに、スーパークラス **play.db.jpa.Model** を使うことでコードをよりきれいにすることもできます。こんな感じです:

bc. public void messages(int page) {
    User connectedUser = User.find("byEmail", connected());
    List<Message> messages = Message.find(
        "user = ? and read = false order by date desc",
        connectedUser
    ).from(page * 10).fetch(10);
    render(connectedUser, messages);
}

h2. <a>5. 簡単なファイルアップロード管理</a>

play のファイルアップロード管理は非常にシンプルです。

HTML フォームはこんな感じで:

bc. <form action="@{Article.uploadPhoto()}" method="POST" enctype="multipart/form-data">
    <input type="text" name="title" />
    <input type="file" id="photo" name="photo" />
    <input type="submit" value="Send it..." />
</form>

Java コードはこんな感じです:

bc. public static void uploadPhoto(String title, File photo) {
   ...
}

これ以上簡単になりますかね？
