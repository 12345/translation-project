h1. 組込みテンプレートタグ

以下は、テンプレートエンジンに組み込まれた標準タグです。

p(note). 利用可能な Java 拡張を検索したい場合は、"JavaDoc":http://www.playframework.org/@api/play/templates/JavaExtensions.html を見てみてください。

h2. <a>a</a>

**a** タグはコントローラのアクションへの HTML リンクを挿入します。

bc. #{a @Application.logout()}Disconnect#{/a}

以下のようにレンダリングされます:

bc. <a href="/application/logout">Disconnect</a>

もし呼び出そうとしているアクションが GET メソッドを使用して起動するどんなルートも持たない場合、play は自動的に、リンクをクリックしたときに javascript を使ってサブミットする隠しフォームを生成します。

h2. <a>doLayout</a>

このタグは、テンプレート継承と共に使用し、評価された子テンプレートの内容を挿入します。

bc. <!-- common header here -->
<div id="content">
    #{doLayout /}
</div>
<!-- common footer here -->

h2. <a>extends</a>

そのテンプレートに、他のテンプレートを継承させます。

bc. #{extends 'main.html' /}

h2. <a>form</a>

**form** タグを挿入します。HTTP メソッドはルートから推測され、デフォルトは POST です。

オプションの **id** 属性は、form 要素に id を設定します。
オプションの **enctype** 属性は、フォームのデータエンコーディングを設定します。デフォルトは 'application/x-www-form-urlencoded' です。

文字セットエンコーディングは常に ''utf-8'' です。

bc. #{form @Client.create() , id:'creationForm' enctype:'multipart/form-data' }
   ...
#{/form}


以下のようにレンダリングされます:

bc. <form action="/client/create" id="frm" method="POST" accept-charset="utf-8" enctype="multipart/form-data">
 ...
</form>

h2. <a>get</a>

**set** タグで定義された値を検索します。get/set メカニズムを使うことで、テンプレート間、すなわちレイアウトと子テンプレート間で値をやり取りすることができます。

bc. <head>
    <title>#{get 'title' /}
</head>

h2. <a>i18n</a>

ローカライズされた Javascript メッセージを外部化します。ローカライズされたメッセージは **i18n()** 関数を使うことで javascript から利用することができます。

**conf/messages** ファイルに訳語を定義してください。

bc. hello_world=Hello, World !
hello_someone=Hello %s !

テンプレート (またはレイアウト) ページにメッセージを取り込んでください:

bc. #{i18n /}

そして Javascript からキーを使って検索してください:

bc. alert(i18n('hello_world'));
alert(i18n('hello_someone', 'John'));

h2. <a>include</a>

別のテンプレートを取り込みます。取り込み側のテンプレート上の全ての変数は、取り込んだ側のテンプレートにて直接利用することができます。

bc. <div id="tree">
    #{include 'tree.html' /}
</div>

h2. <a>if</a>

指定された条件を評価し、true の場合はタグボディを評価します。

bc. #{if user.countryCode == 'en"' }
    Connected user is ${user}
#{/if}

条件を組み合わせて使用する場合は、以下のようにします:

bc. #{if ( request.actionMethod == 'administer'  && user.isAdmin() ) }
    You are admin, allowed to administer.
#{/if}

h2. <a>ifnot</a>

きれいに #{if !condition} を書き換えます。

bc. #{ifnot tasks}
    No tasks today
#{/if}

h2. <a>else</a>

当然、 **if** タグと共に使用されます。

bc. #{if user}
    Connected user is ${user}
#{/if}
#{else}
    Please log in
#{/else}

一方で、 **list** タグと共に使用することも可能であり、list が空の場合に実行されます。

bc. #{list items:task, as:'task'}
    <li>${task}</li>
#{/li}
 
#{else}
    Nothing to do...
#{/else}

h2. <a>elseif</a>

bc. #{if tasks.size() > 1}
    Busy tasklist
#{/if}
 
#{elseif tasks}
    One task on the list
#{/elseif}
 
#{else}
    Nothing to do
#{/else}

**else** と同様に、 **list**タグと共に使用することも可能です。

h2. <a>list</a>

オブジェクトのコレクションをくり返します。

bc. <ul>
#{list items:products, as:'product'}
    <li>${product}</li>
#{/list}
</ul>

このタグは、ボディ内に暗黙的な変数を定義します。変数名には、接頭辞としてループ変数名が付きます。

* **name_index**, アイテムの index で、1 から始まります
* **name_isLast**, 最後の要素の場合に true になります
* **name_isFirst**, 最初の要素の場合に true になります
* **name_parity**, **odd** と **even** が交互に値になります

bc. <ul>
#{list items:products, as:'product'}
    <span class="${product_parity}">${product_index}. ${product}</span>
    ${product_isLast ? '' : '-'}
#{/list}
</ul>

Groovy の **range** オブジェクトを使うことで、容易に **for** ループを作ることができます:

bc. #{list items:0..10, as:'i'}
    ${i}
#{/list}

bc. #{list items:'a'..'z', as:'letter'}
    ${letter} ${letter_isLast ? '' : '|' }
#{/list}


h2. <a>set</a>

同じテンプレートかレイアウトにおいて **get** タグを使って検索できる値を定義します。

bc. #{set title:'Admin' /}
#{set style:'2columns' /}

変数を使用することも可能です:

bc. #{set title:'Profile of ' + user.login /}

変数の値をボディ内で定義することも可能です:

bc. #{set 'title'}
    Profile of ${user.login}
#{/set}

h2. <a>jsRoute</a>

この #{jsRoute /} タグは、サーバ側で定義したルートを Javascript 関数として取り込むことができます。自由な変数を使ってある URL を AJAX で呼び出す必要がある場合、これはとても便利です。

例を見てみましょう:

bc. GET     /users/{id}        Users.show

クライアント側でこのルートをインポートすることができます:

bc. <script type="text/javascript">
    var showUserAction = #{jsRoute @Users.show(':id')}
    
    var displayUserDetail = function(userId) {
        $('userDetail').load( showUserAction({id: userId}) )
    }
</script>


