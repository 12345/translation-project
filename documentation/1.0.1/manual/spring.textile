h1. Spring モジュール

spring サポートモジュールは Spring が管理する Bean の play アプリケーションに対する統合を支援します。

h2. <a>Spring モジュールの有効化</a>

**/conf/application.conf** ファイルに次の行を追記して Spring モジュールを有効化します:

bc. # The spring module
module.spring=${play.path}/modules/spring

h2. <a>application-context.xml レジストリの定義</a>

アプリケーションの **conf/** ディレクトリに **application-context.xml** ファイルを作成し、Bean を定義することができます。

例:

bc. <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springsource.org/dtd/spring-beans-2.0.dtd">
<beans>
    
    <bean id="test" class="utils.Test" />
    
</beans>

h2. <a>アプリケーションコードからの Bean の検索</a>

**play.modules.spring.Spring** ヘルパを使って、アプリケーションコードから Bean インスタンスを取得することができます。

bc. public Application extends Controller {
    
    public static void index() {
        Test test = Spring.getBeanOfType(Test.class);
        ...
    }
    
}

h2. <a>@javax.inject.Inject サポート</a>

**@Inject** アノテーションを使って、定義した Bean をコントローラ、ジョブ、メーラに自動的に注入することができます。

自動的な注入は、これらのクラスの定義された static フィールドに対して働きます。例えば、Spring 内に定義された **PriceWatcher** サービスをあるコントローラに注入するには、単に以下のようにします:

bc. public class Application extends Controller {
    
    @Inject
    static PriceWatcher prices;
    
    public static void index() {
        prices.getAll(); // prices is defined here
    }
    
}

自動リロードは期待通りに動作します。