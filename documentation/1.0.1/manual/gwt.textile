h1. Google Web Toolkit サポート

このモジュールは、GWT UI と Play の統合をシンプルにするヘルパを、アプリケーションサーバとして提供します。

h2. <a>最初に GWT SDK をダウンロード</a>

p. このモジュールは最新バージョンの GWT で動作するよう設計されています。これを書いている時点ではバージョン 1.6.4 が最新です。Play GWT モジュールを使う前に GWT SDK をダウンロードして、GWT_PATH 環境変数を設定しなければいけません。

h2. <a>GWT プロジェクトのセットアップ</a>

はじめに、いつもの方法で新しいアプリケーションを作ります。

bc. # play new test-gwt

そして、conf/application.conf ファイルを編集して GWT モジュールを有効化します :

bc. # Additional modules
# ‾‾‾‾‾
# A module is another play! application. Add a line for each module you want
# to add to your application. Modules path are either absolutes or relative to
# the application root.
#
module.gwt=${play.path}/modules/gwt

ここで **gwt:init** コマンドを使って、既存の Play アプリケーション内で GWT プロジェクトを起動します :

bc. play gwt:init test-gwt

これでプロジェクトにいくつかのファイルとディレクトリが追加されます : 

* **/gwt-public** ディレクトリは GWT がコンパイルしたすべてのリソースを管理します。GWT UI を起動するためのデフォルトの **index.html** が作成されています。この **静的なディレクトリ** を提供する特別なルートを定義していない場合、GWT モジュールは自動的にこれをパス **/app** にマッピングするので、GWT を URL **http://localhost:9000/app** で利用することができます。
* **/app/Main.gwt.xml** は、GWT モジュールを定義するファイルです。このファイルがアプリケーションにおける GWT モジュールの中心です。デフォルトで **client.Main** クラスをエントリポイントとして定義しています。
* **/app/client** パッケージは、GWT が使用するデフォルトのパッケージです。 **client.Main** クラスがデフォルトのエントリポイントとして作成されます。

h2. <a>GWT hosted モードの使用</a>

まず Play アプリケーションを開始します。

bc. play run test-gwt

GWT hosted モードブラウザを開始するためには、 **play gwt:browser** コマンドを使用します

bc. play gwt:browser test-gwt

bq. 初回起動時、GWT は最初に主要なモジュールをコンパイルします。それからは、アプリケーションに変更を加え、hosted モードブラウザをリフレッシュして結果を確認することができます。

!images/gwt!

h2. <a>GWT-RPC を使ったサービスの作成</a>

GWT のマニュアルに沿うと、そこには **RemoteServiceServlet** を使った GWT-RPC にてサービスを公開する方法が説明されています。

Play で GWT サービスを公開するのもほとんど同じですが、Play アプリケーション内にサーブレットを定義できないので、提供されているサポートクラス **play.modules.gwt.GWTService** を使わなければなりません。

例えば、以下のようなサービスを実装する場合:

bc. package client;
 
import com.google.gwt.user.client.rpc.*;
 
@RemoteServiceRelativePath("hello")
public interface HelloService extends RemoteService {
 
    String sayHello(String name);
    
}

単純に **play.modules.gwt.GWTService** を継承したクラスを作成し、 **play.modules.gwt.GWTServicePath** アノテーションを使ってサービスの URL を定義します。以下のような感じです:

bc. package services;
 
import com.google.gwt.user.server.rpc.*;
import play.modules.gwt.*;
import client.*;
 
@GWTServicePath("/main/hello")
public class HelloServiceImpl extends GWTService implements HelloService {
 
    public String sayHello(String name) {
        return "Hello " + name;
    }
 
}

GWT ドキュメントと異なる箇所はここだけです。

h2. <a>GWT UI のデバッグ</a>

hosted モードで GWT UI を実行するとき、Java VM はクライアントの **Java コード** の実行をシミュレートします。このモードでは 2 つの Java VM が使用されることを **理解しなければなりません** :

* ひとつ目は Play アプリケーションを実行します
* ふたつ目はクライアント UI を実行します

そのため、アプリケーション全体をデバッグする場合、JPDA を使って 2 つのデバッグセッションに接続しなければなりません。これは問題になりません... 例えば、netbeans を使っている場合、 **play netbeansify** コマンドで netbeans プロジェクトを作成します:

bc. # play netbeansify test-gwt

それから netbeans で **test-gwt** プロジェクトを開き、デバッグボタンを使って 2 つのデバッグセッションに接続します。デフォルトでは、Play アプリケーションはデバッグのために 8000 番ポートを、GWT ブラウザは 3408 番ポートをリッスンします。

これで、サーバ側コードにもクライアント側コードにもブレークポイントを設定することができ、netbeans は適切な JPDA セッション上で自動的にブレークし、Java コードをデバッグできるようになります。
