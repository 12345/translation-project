h1. HTTP ルーティング

Router は、送り込まれた HTTP リクエストをアクション (コントローラの static で public なメソッド) の呼び出しに対応付けるコンポーネントです。

HTTP リクエストは MVC フレームワークにおいてイベントと見なされます。このイベントは 2 つの主要な情報を含んでいます:

* クエリ文字列を含んだ (/clients/1542 や /photos/list のような) リクエストパス
* HTTP メソッド (GET, POST, PUT, DELETE)

h2. <a>REST について</a>

Representational state transfer (REST) は、World Wide Web などの分散ハイパーメディアシステムのためのソフトウェアアーキテクチャスタイルです。

REST が述べるいくつかの主要な設計原理は以下の通りです:

* アプリケーションはリソースに分割される
* あらゆるリソースは URI を使用することで一意にアドレス付けられる
* すべてのリソースはクライアントとリソースの間で状態を転送するために統一インタフェースを共有する

HTTP を使用する場合は、インタフェースは利用可能な HTTP メソッドのセットとして定義されます。 リソース状態にアクセスするために使用されるプロトコルは、以下の通りです:

* クライアント-サーバ
* ステートレス
* キャッシュ可能
* 階層化

アプリケーションが主な REST 設計原理に従うなら、そのアプリケーションは RESTFul です。play フレームワークは RESTFul アプリケーションを構築するのを容易にします:

* play の Router は URI と Java の呼び出しにリクエストを転送するための HTTP メソッドの両方を解釈します。正規表現ベースの URI パターンは高い柔軟性を提供します。
* プロトコルはステートレスです。これは、2 つの連続したリクエスト間において、どのような状態もサーバに保存できないことを意味します。
* play は HTTP を重要な特徴と見なすので、HTTP に含まれる情報への完全なアクセスを提供します。

h2. <a name="syntax">routes ファイルの構文</a>

**conf/routes** ファイルは、Router が使用する設定ファイルです。このファイルはアプリケーションに必要なすべてのルートを記載します。各ルートは Java 呼び出しに関連付けられた HTTP メソッド + URI パターンで構成されます。

ルート定義がどのようなものか見てみましょう:

bc. GET    /clients/{id}             Clients.show           

各ルートは HTTP メソッドから始まり、URI パターンが続きます。ルーティングの最後の要素は Java 呼び出しの定義です。

**"#"** 文字でルートファイルにコメントを追加できます。

bc. # Display a client
GET    /clients/{id}             Clients.show           

h3. HTTP メソッド

HTTPによってサポートされてる有効なメソッドのうち、いずれかひとつをルートの HTTP メソッドに指定することができます:

* **GET**
* **POST**
* **PUT**
* **DELETE**
* **HEAD**

HTTP メソッドに * を指定した場合、このルートはどのようなメソッドの HTTP リクエストにもマッチします。

bc. *   /clients/{id}             Clients.show           

このルートは HTTP メソッドに関係なく適合します:

bc. GET /clients/1541
PUT /clients/1212


h3. URI パターン

URI パターンはルートに必要なリクエストパスを定義します。ルートの一部を動的に定義することが可能です。動的部分はすべて 中括弧 {...} の中に指定しなければいけません。

bc. /clients/all

完全にマッチします:

bc. /clients/all

しかし ...

bc. /clients/{id}

これらについてもそれぞれマッチします:

bc. /clients/12121
/clients/toto

URI パターンにはより多くの動的な部分があるかもしれません:

bc. /clients/{id}/accounts/{accountId}

動的部分のデフォルトのマッチング方式は、正規表現  **/[^/]+/** として定義されています。動的部分の正規表現を独自に定義することができます。

この正規表現は id に数値のみを許可します:

bc. /clients/{<[0-9]+>id}

これは id が 4～10 文字の小文字だけを含む単語であることを保証します:

bc. /clients/{<[a-z]{4,10}>id}

ここではどのような正規表現も使用することができます。

p(note). **注意**
 
動的部分には名前が付けられます。コントローラは後から HTTP パラメータの Map から動的部分を検索することができます。

デフォルトで、play は URL のあとに続くスラッシュを重要視します。例えば次のようなルートの場合:

bc. GET     /clients         Clients.index

*/clients* という URL にはマッチしますが、 */clients/* にはマッチしません。スラッシュの後にクエスチョンマークを追加することで、play に両方の URL にマッチするよう伝えることができます。例えば、次のようにします:

bc. GET     /clients/?       Clients.index

p(note). この URI パターンは、最後のスラッシュ以外にはどのような追加部分も持つことはできません。

h3. Java の呼び出し定義

ルート定義の最後の部分は Java 呼び出しです。この部分はアクションメソッドの完全修飾名で定義されます。アクションメソッドはコントローラクラスの static かつ public なメソッドでなければいけません。コントローラクラスは **controllers** パッケージに定義しなければならず、また、 **play.mvc.Controller** のサブクラスでなければいけません。

コントローラが controllers パッケージの直下に定義されていない場合は、クラス名の前に Java パッケージ名を追記することができます。 **controllers** パッケージ自体は暗黙的なので、特に指定する必要はありません。

bc. GET    /admin             admin.Dashboard.index           

h3. 静的引数の割り当て

ある場合においては、アクションは再利用しても、いくつかの引数の値に基づいてより特別なルートを定義したいことがあります。

これがどのようなものか、以下の例を見てみましょう:

bc. public static void page(String id) {
    Page page = Page.findById(id);
    render(page);
}

対応するルートは次のとおりです:

bc. GET    /pages/{id}         Application.page

ここで、このページに 'home' という id で別名を定義したいと思います。静的引数を使って別のルートを定義することができます:

bc. GET    /home               Application.page(id:'home')
GET    /pages/{id}         Application.page

最初のルートは、ページの id が 'home' である場合、2 番目のルートと等価です。しかし、最初のルートはより高い優先度を持つので、id が 'home' である Application.page 呼び出しのデフォルト定義として使用されます。


h2. <a name="priority">ルーティングの優先順位</a>

複数のルートが同じリクエストにマッチすることができます。競合がある場合は、(宣言した順番に従い) 最初のルートが使用されます。

例えば:

bc. GET    /clients/all          Clients.listAll
GET    /clients/{id}         Clients.show

これらの定義において、URI が次のとおりである場合:

bc. /client/all

(2 番目のルートもリクエストにマッチするとしても) 最初のルートが適用されて、Clients.listAll をコールします。


h2. <a name="static">静的リソースの配信</a>

静的なリソースのコンテナとして公開したい場合、各フォルダを特別なアクション **staticDir** を使って示してください。

例えば:

bc. GET    /public/               staticDir:public

/public/* パスに対するリクエストがあった場合、play はアプリケーションの /public フォルダからファイルを配信します。

優先度は通常のルートと同じように適用されます。


h2. <a name="reverse">リバースルーティング : URL の生成</a>

Java 呼び出し中に URL を生成するのに Router が使用できます。このため、すべての URI をただひとつの設定ファイルに集約することが可能であり、より自信をもってアプリケーションをリファクタリングすることができます。

例えば、次のようなルート定義において:

bc. GET    /clients/{id}             Clients.show

Clients.show を起動することができる URL を、コードから生成することができます:

bc. map.put("id", 1541);
String url = Router.reverse("Clients.show", map).url;  GET /clients/1541

p(note). この URL 生成機能はフレームワークの様々なコンポーネントに統合されています。決して Router.reverse 直接使用するべきではありません。

URI パターンに含まれていないパラメタを加えると、これらのパラメタはクエリストリングに追加されます:

bc. map.put("id", 1541);
map.put("display", "full");
String url = Router.reverse("Clients.show", map).url; GET /clients/1541?display=full

URL を生成するもっとも特別なルートを見つけるため、優先順位が再度使用されます。

p(note). **考察を続けます**
 
受け取った HTTP リクエストによって起動する Java の呼び出しを Router が決定したら、play フレームワークは Java の呼び出しを起動します。"コントローラがどのように動作するのかを見てみましょう":controllers 。




