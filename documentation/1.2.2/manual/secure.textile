h1. Secure モジュール

このシンプルな **Secure** モジュールは、アプリケーションの基本的な認証および認可管理をセットアップする手助けとなります。このモジュールは、 **@With** アノテーションを使うことで容易にコントローラに追加することのできるインターセプタ一式を定義する、シンプルな **controllers.Secure** コントローラを提供します。

h2. <a>アプリケーションで Secure モジュールを利用可能にする</a>

**/conf/dependencies.yml** ファイルの **require:** の後に次の行を追加することで、Secure モジュールを有効にします:

bc. require:
    - play -> secure

h2. <a>デフォルトの Secure ルートの取り込み</a>

**conf/routes** ファイルに次の行を追加することで、モジュールのデフォルトのルートを取り込みます:

bc. # Import Secure routes
*      /                module:secure

p(note). デフォルトのルートファイルの使用は必須ではないことに **注意** してください。独自のルートを定義することも、これら 2 つを混ぜ合わせることも可能です。

h2. <a>コントローラの保護</a>

コントローラを保護するために必要なのは、 **@With** で注釈することだけです。例えば、以下のようにします:

bc. @With(Secure.class)
public class Application extends Controller {
    
    public static void index() {
        render();
    }
    
}

このコントローラは自動的にデフォルトの認証ページで保護されます。

h2. <a>認証メカニズムのカスタマイズ</a>

デフォルトでは、このログインページはどのような login/password も受け付けます。これをカスタマイズするには、アプリケーションが **Security** プロパイダを提供する必要があります。まずは **controllers.Secure.Security** クラスを継承するクラスを、 **controllers** パッケージに作成してください。その後、 **authenticate(String username, String password)** メソッドをオーバーライドします。

bc. package controllers;
 
public class Security extends Secure.Security {
    
    static boolean authenticate(String username, String password) {
        User user = User.find("byEmail", username).first();
        return user != null && user.password.equals(password);
    }    
    
}

p(note). アプリケーションが認証イベント (onAuthenticated, onDisconnected) にどのように反応すべきかカスタマイズするために、他のメソッドも同様にオーバーライドできることを **確認** してください。

h2. <a>接続したユーザの検索</a>

たった今、作成した Security ヘルパを、接続したユーザを検索するためにアプリケーションコードから再利用することができます。

bc. @With(Secure.class)
public class Application extends Controller {
    
    public static void index() {
        String user = Security.connected();
        render(user);
    }
    
}

h2. <a>認証チェックの追加</a>

Secure モジュールに、接続したユーザがこのアクションをコールするために必要な権限を持っているかチェックすることを伝えるために、 **@Check** アノテーションをコントローラクラスまたはアクションメソッドのどちらにでも使用することができます。

例:

bc. @With(Secure.class)
public class Application extends Controller {
    
   ...
   
   @Check("isAdmin")
   public static void delete(Long id) {
       ...
   }
    
}

デフォルトでは、secure モジュールは常に全てのチェックを承認します。作成した **Security** クラスでひとつ以上のメソッドをオーバーライドして、カスタマイズしなければなりません。

bc. package controllers;
 
public class Security extends Secure.Security {
    
    ...
    
    static boolean check(String profile) {
        User user = User.find("byEmail", connected()).first();
        if ("isAdmin".equals(profile)) {
            return user.admin;
        }
        else {
            return false;
        }
    }    
    
}
h1. Secure module

The simple **Secure** module helps you to set-up basic authentication and authorization management in your application. It provides a simple **controllers.Secure** controller that defines a set of interceptors that you can easily add to your own controllers using the **@With** annotation.

h2. <a>Enable the Secure module for the application</a>

In the **/conf/dependencies.yml** file, enable the Secure module by adding a line after **require:**

bc. require:
    - play -> secure

h2. <a>Import default Secure routes</a>

In the **conf/routes** file, import the default module routes by adding this line:

bc. # Import Secure routes
*      /                module:secure

p(note). **Note** that it窶冱 not required to use the default routes file. You can also define your own routes, or mix the two.

h2. <a>Protecting a controller</a>

To protect a controller you just have to annotate it using **@With**. For example:

bc. @With(Secure.class)
public class Application extends Controller {
    
    public static void index() {
        render();
    }
    
}

This controller will be automatically protected with the default authentication page.

h2. <a>Customize the authentication mechanism</a>

By default, the login page will accept any login/password. To customize it your application has to provide a **Security** provider. Just create a class in the **controllers** package that extends the **controllers.Secure.Security** class. Then you can override the **authenticate(String username, String password)** method.

bc. package controllers;
 
public class Security extends Secure.Security {
    
    static boolean authenticate(String username, String password) {
        User user = User.find("byEmail", username).first();
        return user != null && user.password.equals(password);
    }    
    
}

p(note). **Note** that you can also override other methods to customize how the application should react to authentication events (onAuthenticated, onDisconnected).

h2. <a>Retrieving the connected user</a>

From your application code, you can reuse the Security helper that you窶况e just created to retrieve the connected user.

bc. @With(Secure.class)
public class Application extends Controller {
    
    public static void index() {
        String user = Security.connected();
        render(user);
    }
    
}

h2. <a>Adding authorization check</a>

You can use the **@Check** annotation either on controller classes or action methods to tell the Secure module to check that the connected user has the required authorization to call this action.

For example:

bc. @With(Secure.class)
public class Application extends Controller {
    
   ...
   
   @Check("isAdmin")
   public static void delete(Long id) {
       ...
   }
    
}

By default the secure module will always authorize all checks. You have to customize by overriding one more method in your **Security** class.

bc. package controllers;
 
public class Security extends Secure.Security {
    
    ...
    
    static boolean check(String profile) {
        User user = User.find("byEmail", connected()).first();
        if ("isAdmin".equals(profile)) {
            return user.admin;
        }
        else {
            return false;
        }
    }    
    
}