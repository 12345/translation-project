h1. アプリケーションの本番稼動

アプリケーションを本番環境向けに最適化するシンプルな tips を紹介します。

h2. <a>本番稼動向け application.conf の設定</a>

まず最初に、本番モードを指定するベストな方法は、本番環境のフレームワークに特別な ID を与えることです。例として **production** という ID にしてみましょう。どのようにして ID を与えるかについては、"複数環境用 application.conf の管理":ids を参照してください。

h3. フレームワークを本番モードに設定する:

bc. %production.application.mode=prod

このモードでは、フレームワークは全ての Java ソースとテンプレートをプリコンパイルします。この段階でエラーが見つかった場合、アプリケーションは開始されません。ソースの変更は動的にリロードされません。

h3. 実際に利用するデータベースを定義する:

もし (**db=mem** または **db=fs** いずれかの)  開発用データベースを使っていたのであれば、より堅牢なデータベースエンジンを設定すべきです:

bc. %production.db.url=jdbc:mysql://localhost/prod
%production.db.driver=com.mysql.jdbc.Driver
%production.db.user=root
%production.db.pass=1515312

h3. JPA の自動スキーマ更新を無効にする:

もし Hibernate が提供する自動スキーマ更新機能を使っていたのであれば、本番環境ではこの機能を無効にすべきです。

本番環境サーバにおいて、Hibernate に自動的に本番環境スキーマやデータを ALTER させるというのは、一般的には悪いアイディアです...

最初のデプロイについては、別の問題として考えることもできます。この場合のみを指定するには、以下のようにします:

bc. %production.jpa.ddl=create

h3. 安全な秘密鍵を定義する:

play の秘密鍵は、セッション署名のような暗号機能を保証するために使用されます。アプリケーションは、この秘密鍵を厳重に管理しなければなりません。

bc. %production.application.secret=c12d1c59af499d20f4955d07255ed8ea333

**play secret** コマンドを使って、安全で (少なくとも '本物の' OS 上では) ランダムな新しい秘密鍵を生成することができます。アプリケーションを複数台のサーバに分散させる場合は、すべてのアプリケーションインスタンスに **同じ秘密鍵** を使用することを忘れないでください！


h2. <a>ログの設定</a>

本番環境において、ローテーションするログファイルを使用することは良い考えです。コンソールログは **logs/system.out** ファイルに書き込まれ、このファイルは制限無しに肥大化するので、ログをコンソールに出力してはいけません。

カスタマイズした **log4j.properties** を **conf/** ディレクトリに作成してください:

bc. log4j.rootLogger=ERROR, Rolling
 
log4j.logger.play=INFO
 
# Rolling files
log4j.appender.Rolling=org.apache.log4j.RollingFileAppender
log4j.appender.Rolling.File=application.log
log4j.appender.Rolling.MaxFileSize=1MB
log4j.appender.Rolling.MaxBackupIndex=100
log4j.appender.Rolling.layout=org.apache.log4j.PatternLayout
log4j.appender.Rolling.layout.ConversionPattern=%d{ABSOLUTE} %-5p ~ %m%n

h2. <a>フロントエンド HTTP サーバのセットアップ</a>

アプリケーションの HTTP ポートを **80** 番に設定することで、簡単にアプリケーションをスタンドアロンサーバとしてデプロイすることができます:

bc. %production.http.port=80

しかし、同一サーバ上で複数のアプリケーションを管理したり、拡張性や耐障害性のために複数のアプリケーションインスタンスを負荷分散する場合、フロントエンド HTTP サーバを使用することができます。

**フロントエンド HTTP サーバを使用する場合は、直接 play サーバを使用する場合よりも決して良いパフォーマンスが得られないことに注意してください！**

この例では、[[http://www.lighttpd.net/|lighttpd]] をフロントエンド web サーバとして設定する方法を紹介します。Apache でも同じことができますが、仮想ホストまたは負荷分散だけが必要な場合、lighttpd はとても良い選択であり、設定はとても簡単です！

**/etc/lighttpd/lighttpd.conf** ファイルは、以下のように定義されるでしょう:

bc. server.modules = (
      "mod_access",
      "mod_proxy",
      "mod_accesslog" 
)
...
$HTTP["host"] =~ "www.myapp.com" {
    proxy.balance = "round-robin" proxy.server = ( "/" =>
        ( ( "host" => "127.0.0.1", "port" => 9000 ) ) )
}
 
$HTTP["host"] =~ "www.loadbalancedapp.com" {
    proxy.balance = "round-robin" proxy.server = ( "/" => ( 
          ( "host" => "127.0.0.1", "port" => 9000 ), 
          ( "host" => "127.0.0.1", "port" => 9001 ) ) 
    )
}


h3. 高度なプロキシ設定

フロント HTTP サーバを使用する場合、リクエストアドレスは http サーバからやって来るように見えます。play アプリケーションとプロキシを同一筐体で実行する、一般的なセットアップにおいては、play アプリケーションからは、リクエストが 127.0.0.1 からやって来るように見えるでしょう。

プロキシサーバは、プロキシされたアプリケーションにリクエストがどこからやって来たかを伝える特別なヘッダを、リクエストに追加することができます。ほとんどの web サーバは、第一引数をリモートクライアントの IP アドレスとした X-Forwarded-For ヘッダを追加します。フォワードサポートを有効にするには、play アプリケーションを以下のように設定します:

bc. XForwardedSupport=127.0.0.1,10.0.0.25

play は request.remoteAddress をプロキシの IP からクライアントの IP に変更します。これが動作するよう、プロキシの IP アドレスをリストする必要があります。

しかし、ホストヘッダが付加されない場合、プロキシの問題は依然として残ってしまいます。Apache 2.x を使用する場合、ディレクティブに以下のように追加することができます:

bc. ProxyPreserveHost on

host: ヘッダはクライアントから発行されたオリジナルのホストリクエストヘッダになります。これらふたつのテクニックを連携することで、アプリケーションはスタンドアロンと同じようになります。
