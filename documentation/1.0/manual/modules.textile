h1. アプリケーションのモジュール化

play アプリケーションはいくつかのアプリケーションモジュールから組み立てることができます。これにより、複数のアプリケーションをまたいでアプリケーションコンポーネントを再利用したり、大きなアプリケーションをいくつかの、より小さなアプリケーションに分割することが可能です。

h2. <a>モジュールとは？</a>

モジュールはただの play アプリケーションです; しかし、アプリケーションモジュールのリソースがロードされる方法にいくつかの違いがあります:

* モジュールには、 **conf/application.conf** ファイルがありません。
* モジュールは **conf/routes** ファイルを持つことができますが、これらのルートは自動的にはロードされません。
* すべてのファイルは、まずメインのアプリケーションパスから検索され、その後、すべてのロードされたモジュールから検索されます。
* モジュールにおいて、すべてが任意です。

その他のアプリケーションとまったく同じように、**play new** コマンドでモジュールを作成することができます。

h2. アプリケーションから外部モジュールをロードする方法

アプリケーションから外部のモジュールをロードしたい場合は、アプリケーション中の application.conf ファイルに外部のモジュールを宣言するだけです。

デフォルトアプリケーションは、標準的な play のモジュールパスから CRUD モジュールをロードします。

bc. # Additional modules
# ~~~~~
# A module is another play application. Add a line for each module you want
# to add to your application. Module paths are either absolute or relative to
# the application root.
#
module.crud=${play.path}/modules/crud

フォーラムコンポーネント、ディレクトリコンポーネントといった CMS コンポーネントを持つ大きなアプリケーションがあるとしましょう:

bc. module.cms=../cms
module.forum=../forum
module.directory=../directory

モジュールパスが相対的である場合、それはメインアプリケーションのルートから解決されます。

h2. <a>モジュールからデフォルトルートをロードする</a>

モジュールはデフォルトルートファイルを提供することができます。特別なルート宣言を使用することで、メインアプリケーションの routes ファイルにこれをロードすることができます:

bc. # Import the default CRUD routes
GET     /admin	     module:crud

すべての利用可能なモジュールからルートをロードすることもできます:

bc. GET     /	     module:*
